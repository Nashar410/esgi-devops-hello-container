name: Devops

on: [push]

jobs:
  build_and_push_registry:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build Docker-compose
      id: settingUp
      run: |
        docker-compose up -d

    - name: Login to Docker Hub
      run: echo "${{ secrets.DOCKERHUB_PW }}" | docker login  -u "${{ secrets.DOCKERHUB_LOGIN }}" --password-stdin

    - name: Retagging docker image
      run: |
        docker image tag nashar410/back:latest nashar410/back:latest-${{ github.sha }}
        docker image tag nashar410/front:latest nashar410/front:latest-${{ github.sha }}
        
    - name : Push to Docker Hub
      run: |
        docker push nashar410/back:latest-${{ github.sha }}
        docker push nashar410/front:latest-${{ github.sha }}
  
  terraforming:
    runs-on: ubuntu-latest
    needs: build_and_push_registry
    outputs:
      APP_IP: ${{steps.getIpApp.outputs.APP_IP}}
      APP_ID: ${{steps.getIpApp.outputs.APP_ID}}
      DB_IP: ${{steps.getIpDB.outputs.DB_IP}}
      DB_ID: ${{steps.getIpDB.outputs.DB_ID}}

    steps:
    - uses: actions/checkout@v2

    - name: Installing terraform
      run: |
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update && sudo apt-get install terraform=0.13.0
    
    - name: Environnement setting
      run: |
        echo "SCW_SECRET_KEY=${{secrets.SECRET_KEY}}" >> $GITHUB_ENV
        echo "SCW_ACCESS_KEY=${{secrets.ACCESS_KEY}}" >> $GITHUB_ENV

    - name: Init 
      run: |
        terraform init -input=false

    - name: Plan 
      run: |
        terraform plan -out=tfplan

    - name: Destroy
      run: |
        terraform destroy -auto-approve

    - name: Apply
      run: |
        terraform apply -input=false tfplan

    - name: Exporting App IP and ID
      id: getIpApp
      run: |
        APP_IP=$(sed -n '2p' inventory)
        APP_ID=$(sed -n '4p' inventory)
        echo "::set-output name=APP_IP::$APP_IP"
        echo "::set-output name=APP_ID::$APP_ID"

    - name: Exporting DB IP and ID
      id: getIpDB
      run: |
        DB_IP=$(sed -n '6p' inventory)
        tmp=$(sed -n '8p' inventory)
        DB_ID=$(echo $tmp | cut -c 10-)
        echo "::set-output name=DB_IP::$DB_IP"
        echo "::set-output name=DB_ID::$DB_ID"

  deploy:
    runs-on: ubuntu-latest
    needs: [build_and_push_registry, terraforming]

    steps:
    - uses: actions/checkout@v2

    - name: Deploy Database
      uses: fifsky/ssh-action@master
      env:
        DB_IP: ${{needs.terraforming.outputs.DB_IP}}
      with:
        command: |
          docker run --rm -d -p 6379:6379 redis:6.0.9-alpine 
        host: $DB_IP
        user: root
        key: ${{secrets.PRIVATE_SSH}}
        args: "-tt -vvv"

    - name: Deploy App back & front
      uses: appleboy/ssh-action@master
      env:
        DB_IP: ${{needs.terraforming.outputs.DB_IP}}
        APP_IP: ${{needs.terraforming.outputs.APP_IP}}
        SHA: ${{ github.sha }}
        DB_URL: ${{needs.terraforming.outputs.DB_ID}}.pub.instances.scw.cloud
      with:
        host: ${{env.APP_IP}}
        username: root        
        key: ${{secrets.PRIVATE_SSH}}
        envs: SHA,DB_IP,APP_IP,DB_URL
        script: |
          docker run --rm -d -p 8081:8081 -e REDIS_HOST=$DB_URL -e NODE_ENV=production nashar410/back:latest-$SHA
          docker run --rm -d -p 81:80 -e NODE_ENV=production nashar410/front:latest-$SHA
